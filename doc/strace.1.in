.\" Copyright (c) 1991, 1992 Paul Kranenburg <pk@cs.few.eur.nl>
.\" Copyright (c) 1993 Branko Lankester <branko@hacktic.nl>
.\" Copyright (c) 1993, 1994, 1995, 1996 Rick Sladkey <jrs@world.std.com>
.\" Copyright (c) 1996-2025 The strace developers.
.\" All rights reserved.
.\"
.\" SPDX-License-Identifier: LGPL-2.1-or-later
.de CW
.sp
.in +4n
.nf
.ft CW
..
.de CE
.ft R
.fi
.in
.sp
..
.\" Like .OP, but with ellipsis at the end in order to signify that
.\" option can be provided multiple times.
.\" Based on .OP definition in groff's an-ext.tmac.
.de OM
.  ie \\n(.$-1 \
.    RI "[\fB\\$1\fP" "\ \\$2" "]...\&"
.  el \
.    RB "[" "\\$1" "]...\&"
..
.\" Required option.
.de OR
.  ie \\n(.$-1 \
.    RI "\fB\\$1\fP" "\ \\$2"
.  el \
.    BR "\\$1"
..
.TH STRACE 1 "@STRACE_MANPAGE_DATE@" "strace @VERSION@"
.SH NAME
strace \- trace system calls and signals
.SH SYNOPSIS
.SY strace
.\" -kk option is available:
.if '@ENABLE_STACKTRACE_FALSE@'#' .if '@USE_LIBDW_FALSE@'#' .OP \-ACdffhikkqqrtttTvVwxxyyYzZ
.\" only -k option is available:
.if '@ENABLE_STACKTRACE_FALSE@'#' .if '@USE_LIBUNWIND_FALSE@'#' .OP \-ACdffhikqqrtttTvVwxxyyYzZ
.\" no -k option is available:
.if '@ENABLE_STACKTRACE_TRUE@'#' .OP \-ACdffhiqqrtttTvVwxxyyYzZ
.OP \-a column
.OP \-b execve
.OM \-e expr
.OP \-I n
.OP \-o file
.OP \-O overhead
.OM \-p pid
.OM \-P path
.OP \-s strsize
.OP \-S sortby
.OP \-U columns
.OP \-X format
.OP \-\-seccomp\-bpf
.if '@ENABLE_STACKTRACE_FALSE@'#' .OP \-\-stack\-trace\-frame\-limit\fR=\fIlimit\fR
.OP \-\-syscall\-limit=\fIlimit\fR
.if '@ENABLE_SECONTEXT_FALSE@'#' .OP \-\-secontext\fR[=\fIformat\fR]
.OP \-\-tips\fR[=\fIformat\fR]
.BR "" {
.OR \-p pid
.BR "" |
.OP \-DDD
.OM \-E var\fR[=\fIval\fR]
.OP \-u username
.IR command " [" args ]
.BR "" }
.YS
.SY strace
.B \-c
.OP \-dfwzZ
.OP \-b execve
.OM \-e expr
.OP \-I n
.OP \-O overhead
.OM \-p pid
.OM \-P path
.OP \-S sortby
.OP \-U columns
.OP \-\-seccomp\-bpf
.OP \-\-syscall\-limit=\fIlimit\fR
.OP \-\-tips\fR[=\fIformat\fR]
.BR "" {
.OR \-p pid
.BR "" |
.OP \-DDD
.OM \-E var\fR[=\fIval\fR]
.OP \-u username
.IR command " [" args ]
.BR "" }
.YS
.SY strace
.B \-\-tips\fR[=\fIformat\fR]
.YS
.SH DESCRIPTION
.IX "strace command" "" "\fLstrace\fR command"
.LP
In its simplest use case,
.B strace
runs the specified
.I command
until it exits.
It intercepts and records the system calls made by a process
and the signals a process receives.
The name of each system call, its arguments, and its return value
are printed to standard error or to the file specified with the
.B \-o
option.
.LP
.B strace
is a useful diagnostic, instructional, and debugging tool.
System administrators, diagnosticians, and troubleshooters will find it
invaluable for solving problems with programs for which source code is not
readily available, as recompilation is not required for tracing.
Students, hackers, and the overly-curious will discover that a great
deal can be learned about a system and its system calls by tracing even
ordinary programs.
Programmers will find that since system calls and signals occur at the
user/kernel interface, a close examination of this boundary is very
useful for bug isolation, sanity checking, and attempting to capture
race conditions.
.LP
Each line in the trace contains the system call name, followed
by its arguments in parentheses and its return value.
An example from tracing the command "cat /dev/null" is:
.CW
open("/dev/null", O_RDONLY) = 3
.CE
Errors, typically indicated by a return value of \-1, have the
.I errno
symbol and error string appended.
.CW
open("/foo/bar", O_RDONLY) = \-1 ENOENT (No such file or directory)
.CE
Signals are printed as a signal symbol and a decoded
.I siginfo
structure.
An excerpt from tracing and interrupting the command "sleep 666" is:
.CW
sigsuspend([] <unfinished ...>
--- SIGINT {si_signo=SIGINT, si_code=SI_USER, si_pid=...} ---
+++ killed by SIGINT +++
.CE
If a system call is being executed while another is called from a different
thread or process,
.B strace
will attempt to preserve the order of these events and mark the ongoing call as
.IR unfinished .
When the call returns, it will be marked as
.IR resumed .
.CW
[pid 28772] select(4, [3], NULL, NULL, NULL <unfinished ...>
[pid 28779] clock_gettime(CLOCK_REALTIME, {tv_sec=1130322148, tv_nsec=3977000}) = 0
[pid 28772] <... select resumed> )      = 1 (in [3])
.CE
The interruption of a (restartable) system call by a signal delivery
is handled differently, as the kernel terminates the system call and
arranges for its immediate re-execution after the signal handler
completes.
.CW
read(0, 0x7ffff72cf5cf, 1)              = ? ERESTARTSYS (To be restarted)
--- SIGALRM {si_signo=SIGALRM, si_code=SI_KERNEL} ---
rt_sigreturn({mask=[]})                 = 0
read(0, "", 1)                          = 0
.CE
Arguments are printed in symbolic form with passion.
This example shows the shell performing ">>xyzzy" output redirection:
.CW
open("xyzzy", O_WRONLY|O_APPEND|O_CREAT, 0666) = 3
.CE
Here, the second and third arguments of
.BR open (2)
are decoded by breaking down the flag argument into its three bitwise-OR
constituents and printing the mode value in octal, following tradition.
Where traditional or native usage differs from ANSI or POSIX, the latter
forms are preferred.
In some cases,
.B strace
output has proven to be more readable than the source code itself.
.LP
Structure pointers are dereferenced, and their members are displayed
as appropriate.
In most cases, arguments are formatted in the most C-like fashion possible.
For example, the essence of the command "ls \-l /dev/null" is captured as:
.CW
lstat("/dev/null", {st_mode=S_IFCHR|0666, st_rdev=makedev(0x1, 0x3), ...}) = 0
.CE
Notice how the
.I "struct stat"
argument is dereferenced and how each member is displayed symbolically.
In particular, observe how the
.I st_mode
member is carefully decoded into a bitwise-OR of symbolic and numeric values.
Also, note that in this example, the first argument to
.BR lstat (2)
is an input to the system call, and the second argument is an output.
Since output arguments are not modified if the system call fails,
arguments may not always be dereferenced.
For example, retrying the "ls \-l" example with a non-existent file
produces the following line:
.CW
lstat("/foo/bar", 0xb004) = \-1 ENOENT (No such file or directory)
.CE
In this case, the porch light is on but nobody is home.
The pointer's value is displayed because the structure
it points to was not populated due to the error.
.LP
System calls unknown to
.B strace
are printed in a raw format, with the hexadecimal system call number
prefixed with "syscall_":
.CW
syscall_0xbad(0x1, 0x2, 0x3, 0x4, 0x5, 0x6) = -1 ENOSYS (Function not implemented)
.CE
.LP
Character pointers are dereferenced and printed as C strings.
Non-printing characters in strings are normally represented by
standard C escape codes.
Only the first
.I strsize
(32 by default) bytes of strings are printed;
longer strings have an ellipsis appended following the closing quote.
Here is a line from "ls \-l" where the
.BR getpwuid (3)
library routine is reading the password file:
.CW
read(3, "root::0:0:System Administrator:/"..., 1024) = 422
.CE
While structures are annotated using curly braces, pointers to basic
types and arrays are printed using square brackets with commas
separating the elements.
Here is an example from the command
.BR id (1)
on a system with supplementary group IDs:
.CW
getgroups(32, [100, 0]) = 2
.CE
On the other hand, bit-sets are also shown using square brackets,
but set elements are separated only by a space.
Here is the shell, preparing to execute an external command:
.CW
sigprocmask(SIG_BLOCK, [CHLD TTOU], []) = 0
.CE
Here, the second argument is a bit-set of two signals,
.BR SIGCHLD " and " SIGTTOU .
In some cases, the bit-set is so full that it is more valuable
to print the unset elements.
In that case, the bit-set is prefixed by a tilde, like this:
.CW
sigprocmask(SIG_UNBLOCK, ~[], NULL) = 0
.CE
Here, the second argument represents the full set of all signals.
.SH OPTIONS
.SS General
.TP 12
.BI "\-e " expr
Modifies which events to trace or how to trace them by specifying
a qualifying expression.
The format of the expression is:
.RS 15
.IP
[\,\fIqualifier\/\fB=\fR][\fB!\fR]\,\fIvalue\/\fR[\fB,\fR\,\fIvalue\/\fR]...
.RE
.IP
where
.I qualifier
is one of
.BR trace " (or " t ),
.BR trace\-fds " (or " trace\-fd " or " fd " or " fds ),
.BR abbrev " (or " a ),
.BR verbose " (or " v ),
.BR raw " (or " x ),
.BR signal " (or " signals " or " s ),
.BR read " (or " reads " or " r ),
.BR write " (or " writes " or " w ),
.BR fault ,
.BR inject ,
.BR status ,
.BR quiet " (or " silent " or " silence " or " q ),
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR secontext ,
.BR decode\-fds " (or " decode\-fd ),
.BR decode\-pids " (or " decode\-pid ),
or
.BR kvm ,
and
.I value
is a qualifier-dependent symbol or number.
The default qualifier is
.BR trace .
Using an exclamation mark negates the set of values.
For example,
.BR \-e "\ " open
is equivalent to
.BR \-e "\ " trace = open ,
which in turn means trace only the
.B open
system call.
By contrast,
.BR \-e "\ " trace "=!" open
means to trace every system call except
.BR open .
In addition, the special values
.B all
and
.B none
may be used to trace every event or no events, respectively.
.IP
Note that some shells use the exclamation mark for history
expansion even inside quoted arguments.
In that case, the exclamation mark must be escaped with a backslash.
.SS Startup
.TP 12
\fB\-E\ \fIvar\fR=\,\fIval\fR
.TQ
.BR "\-\-env" = \fIvar\fR = \fIval\fR
Runs the command with the environment variable
.IR var = val
set for execution.
.TP
.BI "\-E " var
.TQ
.BR "\-\-env" = \fIvar\fR
Removes
.IR var
from the inherited environment variables before executing the command.
.TP
.BI "\-p " pid
.TQ
.BR "\-\-attach" = \fIpid\fR
Attaches to the process with the process
.SM ID
.I pid
and begin tracing.
The trace may be terminated
at any time by a keyboard interrupt signal
.RB ( CTRL\-C ).
.B strace
will respond by detaching itself from the traced processes,
leaving them to continue running.
.IP
Multiple
.B \-p
options can be used to attach to several processes in addition
to the command, which is optional if at least one
.B \-p
option is given.
.IP
A single
.B \-p
option can accept multiple process IDs separated by a comma (\(lq,\(rq),
space (\(lq \(rq), tab, or newline.
Consequently, syntaxes like
.B \-p
"$(pidof PROG)" and
.B \-p
"$(pgrep PROG)" are supported.
.TP
.BI "\-u " username
.TQ
.BR "\-\-user" = \fIusername\fR
Runs command with the user \s-1ID\s0, group \s-2ID\s0, and
supplementary groups of
.IR username .
This option is only useful when running as root, as it enables
the correct execution of setuid and/or setgid binaries.
Unless this option is used, setuid and setgid programs are executed
without their effective privileges.
.TQ
.BI "\-u " UID:GID
.TQ
.BR "\-\-user" = \fIUID:GID\fR
Alternative syntax where the program is started with exactly
the given user and group IDs, and an empty list of supplementary groups.
In this case, user and group name lookups are not performed.
.TP
.BR "\-\-argv0" = \fIname\fR
Sets the executed command's argv[0] to
.IR name .
This is useful for tracing multi-call executables that interpret argv[0],
such as busybox or kmod.
.SS Tracing
.TP 12
.BI "\-b " syscall
.TQ
.BR "\-\-detach\-on" = \fIsyscall\fR
Detaches from the traced process if the specified system call is reached.
Currently, only
.B execve
keyword is supported, which includes
.BR execve (2)
and
.BR execveat (2)
system calls.
This option is useful for tracing a multi-threaded process with
.BR \-f
without also tracing its (potentially very complex) child processes.
.TP
.B \-D
.TQ
.B \-\-daemonize
.TQ
.BR \-\-daemonize = grandchild
Runs the tracer process as a grandchild of the tracee, not as its parent.
This reduces the visible effect of
.B strace
by keeping the tracee a direct child of the calling process.
.TP
.B \-DD
.TQ
.BR \-\-daemonize = pgroup
.TQ
.BR \-\-daemonize = pgrp
Runs tracer process as tracee's grandchild in a separate process group.
In addition to reducing the visible effect of
.BR strace ,
this also prevents
.B strace
from being terminated by a
.BR kill (2)
signal sent to the entire process group.
.TP
.B \-DDD
.TQ
.BR \-\-daemonize = session
Runs the tracer process as the tracee's grandchild in a separate session
(known as "true daemonisation").
In addition to reduction of the visible effect of
.BR strace ,
this also prevents
.B strace
from being terminated upon session termination.
.TP
.B \-f
.TQ
.BR \-\-follow\-forks
Traces child processes as they are created by currently traced
processes as a result of the
.BR fork (2),
.BR vfork (2)
and
.BR clone (2)
system calls.
Note that if process
.I PID
is multi-threaded, using
.B \-f
.B \-p
.I PID
attaches to all of its threads, not just the one with
.IR thread_id " = " PID .
.TP
.B \-\-output\-separately
If the
.BR \-\-output = \fIfilename\fR
option is in effect, the trace for each process is written to a separate
.IR filename . pid
file, where
.I pid
is the process ID.
.TP
.B \-ff
.TQ
.B \-\-follow\-forks \-\-output\-separately
Combines the effects of
.B \-\-follow\-forks
and
.B \-\-output\-separately
options.
This is incompatible with
.BR \-c ,
since no per-process counts are kept.
.IP
Use
.BR strace\-log\-merge (1)
to get a combined view of the log files.
.TP
.BI "\-I " interruptible
.TQ
.BR "\-\-interruptible" = \fIinterruptible\fR
Controls when
.B strace
can be interrupted by signals (such as pressing
.BR CTRL\-C ).
.RS
.TP 15
.BR 1 ", " anywhere
no signals are blocked;
.TQ
.BR 2 ", " waiting
fatal signals are blocked while decoding system call (default);
.TQ
.BR 3 ", " never
fatal signals are always blocked (default if
.BR \-o " " \fIFILE\fR " " \fIPROG\fR );
.TQ
.BR 4 ", " never_tstp
fatal signals and
.BR SIGTSTP " (" CTRL\-Z )
are always blocked (useful to make
.BI "strace \-o " "FILE PROG"
not stop on
.BR CTRL\-Z ,
default if
.BR \-D ).
.RE
.TP
.BR "\-\-syscall\-limit" = \fIlimit\fR
Detaches all tracees after
.I limit
system calls have been captured.
System calls filtered out via
.BR \-\-trace ,
.B \-\-trace\-path
or
.B \-\-status
options are not considered when keeping track of the number of system calls
that are captured.
.TP
.B \-\-kill\-on\-exit
Applies the
.B PTRACE_O_EXITKILL
ptrace option to all tracees, which sends a SIGKILL signal to a tracee
if the tracer exits.
This prevents tracees from being left running after the tracer exits,
as they will not be detached on cleanup.
.B \-\-kill\-on\-exit
is not compatible with
.BR \-p / \-\-attach
options.
.SS Filtering
.TP 12
\fB\-e\ trace\fR=\,\fIsyscall_set\fR
.TQ
\fB\-e\ t\fR=\,\fIsyscall_set\fR
.TQ
\fB\-\-trace\fR=\,\fIsyscall_set\fR
Traces only the specified set of system calls.
.I syscall_set
is defined as
[\fB!\fR]\,\fIvalue\fR[\fB,\fR\,\fIvalue\/\fR],
and
.I value
can be one of the following:
.RS
.TP 13
.I syscall
Traces specific system call, specified by its name (see
.BR syscalls (2)
for a reference, but also see
.BR NOTES ).
.TP
.BI ? value
A question mark preceding the qualification suppresses errors
if no matching system calls are found.
.TP
.IB value @64
Limits the system call specification described by
.I value
to the 64-bit personality.
.TP
.IB value @32
Limits the system call specification described by
.I value
to the 32-bit personality.
.TP
.IB value @x32
Limits the system call specification described by
.I value
to the x32 personality.
.TP
.B all
Traces all system calls.
.TP
.BI / regex
Traces only those system calls that match the
.IR regex .
You can use
.B POSIX
Extended Regular Expression syntax (see
.BR regex (7)).
.TP
.B %file
.TQ
.BR file
Traces all system calls that take a file name as an argument.
You can think of this as an abbreviation for
.BR \-\-trace = open , stat , chmod , unlink ,...
which is useful to seeing what files the process is referencing.
Furthermore, using the abbreviation will ensure that you don't
accidentally forget to include a call like
.BR newfstatat (2)
in the list.
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = file \[dq])
is deprecated.
.TP
.B %process
.TQ
.B process
Traces system calls associated with process lifecycle
(creation, exec, termination).
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = process \[dq])
is deprecated.
.TP
.B %net
.TQ
.B %network
.TQ
.B network
Traces all the network related system calls.
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = network \[dq])
is deprecated.
.TP
.BR %signal
.TQ
.BR signal
Traces all signal related system calls.
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = signal \[dq])
is deprecated.
.TP
.BR %ipc
.TQ
.BR ipc
Traces all IPC related system calls.
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = ipc \[dq])
is deprecated.
.TP
.BR %desc
.TQ
.BR desc
Traces all file descriptor related system calls.
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = desc \[dq])
is deprecated.
.TP
.BR %memory
.TQ
.BR memory
Traces all memory mapping related system calls.
The syntax without a preceding percent sign
.RB (\[dq] \-\-trace = memory \[dq])
is deprecated.
.TP
.BR %creds
Traces system calls that read or modify user and group identifiers or capability sets.
.TP
.BR %stat
Traces stat system call variants.
.TP
.BR %lstat
Traces lstat system call variants.
.TP
.BR %fstat
Traces fstat, fstatat, and statx system call variants.
.TP
.BR %%stat
Traces system calls used for requesting file status (stat, lstat, fstat, fstatat,
statx, and their variants).
.TP
.BR %statfs
Traces statfs, statfs64, statvfs, osf_statfs, and osf_statfs64 system calls.
The same effect can be achieved with
.BR \-\-trace = /^(.*_)?statv?fs
regular expression.
.TP
.BR %fstatfs
Traces fstatfs, fstatfs64, fstatvfs, osf_fstatfs, and osf_fstatfs64 system calls.
The same effect can be achieved with
.BR \-\-trace = /fstatv?fs
regular expression.
.TP
.BR %%statfs
Traces system calls related to file system statistics
(statfs-like, fstatfs-like, and ustat).
The same effect can be achieved with
.BR \-\-trace = /statv?fs|fsstat|ustat
regular expression.
.TP
.BR %clock
Traces system calls that read or modify system clocks.
.TP
.BR %pure
Traces system calls that always succeed and have no arguments.
Currently, this list includes
.BR arc_gettls "(2), " getdtablesize "(2), " getegid "(2), " getegid32 "(2),"
.BR geteuid "(2), " geteuid32 "(2), " getgid "(2), " getgid32 "(2),"
.BR getpagesize "(2), " getpgrp "(2), " getpid "(2), " getppid "(2),"
.BR get_thread_area (2)
(on architectures other than x86),
.BR gettid "(2), " get_tls "(2), " getuid "(2), " getuid32 "(2),"
.BR getxgid "(2), " getxpid "(2), " getxuid "(2), " kern_features "(2), and"
.BR metag_get_tls "(2)"
system calls.
.RE
.IP
The
.B \-c
option is useful for determining which system calls might be useful to trace.
For example,
.BR \-\-trace = open,close,read,write
means to only trace those four system calls.
Be careful when making inferences about the user/kernel boundary
if only a subset of system calls are being monitored.
The default is
.BR \-\-trace = all .
.TP
\fB\-e\ trace\-fd\fR=\,\fIset\fR
.TQ
\fB\-e\ trace\-fds\fR=\,\fIset\fR
.TQ
\fB\-e\ fd\fR=\,\fIset\fR
.TQ
\fB\-e\ fds\fR=\,\fIset\fR
.TQ
\fB\-\-trace\-fds\fR=\,\fIset\fR
Traces only the system calls that operate
on the specified subset of (non-negative) file descriptors.
Note that usage of this option also filters out all the system calls
that do not operate on file descriptors at all.
.IP
This filter is combined with the
.B \-\-trace\-path
filter; a system call is traced if it matches either of them.
.TP
\fB\-e\ signal\fR=\,\fIset\fR
.TQ
\fB\-e\ signals\fR=\,\fIset\fR
.TQ
\fB\-e\ s\fR=\,\fIset\fR
.TQ
\fB\-\-signal\fR=\,\fIset\fR
Traces only the specified subset of signals.
The default is
.BR \-\-signal = all .
For example,
.BR \-\-signal "=!" SIGIO
(or
.BR \-\-signal "=!" io )
causes
.B SIGIO
signals not to be traced.
.TP
\fB\-e\ status\fR=\,\fIset\fR
.TQ
\fB\-\-status\fR=\,\fIset\fR
Prints only system calls with the specified return status.
The default is
.BR \-\-status = all .
When using the
.B status
qualifier, the chronological order of events may not be preserved.
This is because
.B strace
must wait for a system call to complete before deciding whether to print it.
If two system calls are executed by concurrent threads,
.B strace
will first print both the entry and exit of the first system call to exit,
regardless of their respective entry time.
The entry and exit of the second system call to exit will be printed afterwards.
Here is an example when
.BR select (2)
is called, but a different thread calls
.BR clock_gettime (2)
before
.BR select (2)
finishes:
.CW
[pid 28779] 1130322148.939977 clock_gettime(CLOCK_REALTIME, {1130322148, 939977000}) = 0
[pid 28772] 1130322148.438139 select(4, [3], NULL, NULL, NULL) = 1 (in [3])
.CE
.I set
can include the following elements:
.RS
.TP 13
.B successful
Traces system calls that returned without an error code.
The
.B \-z
option has the effect of
.BR \-\-status = successful .
.TQ
.B failed
Traces system calls that returned with an error code.
The
.B \-Z
option has the effect of
.BR \-\-status = failed .
.TQ
.B unfinished
Traces system calls that did not return.
This might happen, for example, due to an execve call
in a different thread from the same thread group.
.TQ
.B unavailable
Traces system calls that returned but strace failed to fetch the error status.
.TQ
.B detached
Traces system calls for which strace detached before the return.
.RE
.TP
.BI "\-P " path
.TQ
.BR "\-\-trace\-path" = \fIpath\fR
Traces only system calls accessing
.IR path .
Multiple
.B \-P
options can be used to specify several paths.
This filter is combined with the
.B \-\-trace\-fds
filter; a system call is traced if it matches either option.
.TP
.B \-z
.TQ
.B \-\-successful\-only
Prints only system calls that returned without an error code.
.TP
.B \-Z
.TQ
.B \-\-failed\-only
Prints only system calls that returned with an error code.
.SS Output format
.TP 12
.BI "\-a " column
.TQ
.BR "\-\-columns" = \fIcolumn\fR
Aligns return values in a specific column (default column 40).
.TP
\fB\-e\ abbrev\fR=\,\fIsyscall_set\fR
.TQ
\fB\-e\ a\fR=\,\fIsyscall_set\fR
.TQ
\fB\-\-abbrev\fR=\,\fIsyscall_set\fR
Abbreviates the output from printing each member of large structures.
The syntax of the
.I syscall_set
specification is the same as in the
.B \-\-trace
option.
The default is
.BR \-\-abbrev = all .
The
.B \-v
option has the effect of
.BR \-\-abbrev = none .
.TP
\fB\-e\ verbose\fR=\,\fIsyscall_set\fR
.TQ
\fB\-e\ v\fR=\,\fIsyscall_set\fR
.TQ
\fB\-\-verbose\fR=\,\fIsyscall_set\fR
Dereferences structures for the specified set of system calls.
The syntax of the
.I syscall_set
specification is the same as in the
.B \-\-trace
option.
The default is
.BR \-\-verbose = all .
.TP
\fB\-e\ raw\fR=\,\fIsyscall_set\fR
.TQ
\fB\-e\ x\fR=\,\fIsyscall_set\fR
.TQ
\fB\-\-raw\fR=\,\fIsyscall_set\fR
Prints raw, undecoded arguments for the specified set of system calls.
The syntax of the
.I syscall_set
specification is the same as in the
.B \-\-trace
option.
This option has the effect of causing all arguments to be printed
in hexadecimal.
This option is useful if the decoding is not trusted,
or if the actual numeric value of an argument is needed.
See also
.B \-X raw
option.
.TP
\fB\-e\ read\fR=\,\fIset\fR
.TQ
\fB\-e\ reads\fR=\,\fIset\fR
.TQ
\fB\-e\ r\fR=\,\fIset\fR
.TQ
\fB\-\-read\fR=\,\fIset\fR
Performs a full hexadecimal and ASCII dump of all the data read from
file descriptors listed in the specified set.
For example, to see all input activity on file descriptors
.I 3
and
.I 5
use
\fB\-\-read\fR=\,\fI3\fR,\fI5\fR.
Note that this is independent from the normal tracing of the
.BR read (2)
system call that is controlled by the option
.BR \-\-trace = read .
.TP
\fB\-e\ write\fR=\,\fIset\fR
.TQ
\fB\-e\ writes\fR=\,\fIset\fR
.TQ
\fB\-e\ w\fR=\,\fIset\fR
.TQ
\fB\-\-write\fR=\,\fIset\fR
Performs a full hexadecimal and ASCII dump of all the data
written to file descriptors listed in the specified set.
For example, to see all output activity on file descriptors
.I 3
and
.I 5
use
\fB\-\-write\fR=\,\fI3\fR,\,\fI5\fR.
Note that this is independent from the normal tracing of the
.BR write (2)
system call that is controlled by the option
.BR \-\-trace = write .
.TP
\fB\-e\ quiet\fR=\,\fIset\fR
.TQ
\fB\-e\ silent\fR=\,\fIset\fR
.TQ
\fB\-e\ silence\fR=\,\fIset\fR
.TQ
\fB\-e\ q\fR=\,\fIset\fR
.TQ
\fB\-\-quiet\fR=\,\fIset\fR
.TQ
\fB\-\-silent\fR=\,\fIset\fR
.TQ
\fB\-\-silence\fR=\,\fIset\fR
Suppresses various information messages.
The default is
.BR \-\-quiet = none .
.I set
can include the following elements:
.RS
.TP 17
.B attach
Suppresses messages about attaching and detaching
.RB (\[dq] "[ Process NNNN attached ]" "\[dq],"
.RB "\[dq]" "[ Process NNNN detached ]" "\[dq])."
.TQ
.B exit
Suppress messages about process exits
.RB (\[dq] "+++ exited with SSS +++" \[dq]).
.TQ
.B path-resolution
Suppress messages about resolution of paths provided via the
.B \-P
option
.RB (\[dq] "Requested path \[dq]...\[dq] resolved into \[dq]...\[dq]" \[dq]).
.TQ
.B personality
Suppress messages about process personality changes
.RB (\[dq] "[ Process PID=NNNN runs in PPP mode. ]" \[dq]).
.TQ
.B thread-execve
.TQ
.B superseded
Suppress messages about process being superseded by
.BR execve (2)
in another thread
.RB (\[dq] "+++ superseded by execve in pid NNNN +++" \[dq]).
.RE
.TP
\fB\-e\ decode\-fds\fR=\,\fIset\fR
.TQ
\fB\-\-decode\-fds\fR=\,\fIset\fR
Decodes various information associated with file descriptors.
The default is
.BR \-\-decode\-fds = none .
.I set
can include the following elements:
.RS
.TP 9
.B path
Prints file paths.
Also enables printing of tracee's current working directory when
.B AT_FDCWD
constant is used.
.TQ
.B socket
Prints socket protocol-specific information.
.TQ
.B dev
Prints character/block device numbers.
.TQ
.B eventfd
Prints eventfd object details associated with eventfd file descriptors.
.TQ
.B pidfd
Prints PIDs associated with pidfd file descriptors.
.TQ
.B signalfd
Prints signal masks associated with signalfd file descriptors.
.RE
.TP
\fB\-e\ decode\-pids\fR=\,\fIset\fR
.TQ
\fB\-\-decode\-pids\fR=\,\fIset\fR
Decodes various information associated with process IDs
(and also thread IDs, process group IDs, and session IDs).
The default is
.BR \-\-decode\-pids = none .
.I set
can include the following elements:
.RS
.TP 8
.B comm
Prints command names associated with thread or process IDs.
.TQ
.B pidns
Prints thread, process, process group, and session IDs in strace's PID namespace
if the tracee is in a different PID namespace.
.RE
.TP
.BR "\-e\ kvm" = vcpu|vcpu+
.TQ
.BR "\-\-kvm" = vcpu|vcpu+
Prints the exit reason of kvm vcpu (=\fBvcpu\fR), or
prints the whole kvm_run struct including the reason (=\fBvcpu+\fR).
Requires Linux kernel version 4.16.0 or higher.
.TP
.BR "\-e\ namespace" = new
.TQ
.BR "\-\-namespace" = new
Prints the new namespaces entered by the tracee.
The following system calls are supported:
.BR clone (2),
.BR clone3 (2),
.BR setns (2),
and
.BR unshare (2).
.TP
.B \-i
.TQ
.B \-\-instruction\-pointer
Prints the instruction pointer at the time of the system call.
.TP
.B \-n
.TQ
.B \-\-syscall\-number
Prints the system call number.
.TP
.B \-N
.TQ
.B \-\-arg\-names
Prints the system call argument names.
.if '@ENABLE_STACKTRACE_FALSE@'#' .TP
.if '@ENABLE_STACKTRACE_FALSE@'#' .B \-k
.if '@ENABLE_STACKTRACE_FALSE@'#' .TQ
.if '@ENABLE_STACKTRACE_FALSE@'#' .BR \-\-stack\-trace [= symbol ]
.if '@ENABLE_STACKTRACE_FALSE@'#' Prints the execution stack trace of the traced
.if '@ENABLE_STACKTRACE_FALSE@'#' processes after each system call.
.if '@USE_LIBDW_FALSE@'#' .TP
.if '@USE_LIBDW_FALSE@'#' .B \-kk
.if '@USE_LIBDW_FALSE@'#' .TQ
.if '@USE_LIBDW_FALSE@'#' .BR \-\-stack\-trace = source
.if '@USE_LIBDW_FALSE@'#' Prints the execution stack trace and source code information
.if '@USE_LIBDW_FALSE@'#' of the traced processes after each system call.
.if '@USE_LIBDW_FALSE@'#' This option expects the target program is compiled
.if '@USE_LIBDW_FALSE@'#' with appropriate debug options:
.if '@USE_LIBDW_FALSE@'#' "\-g" (gcc), or "\-g \-gdwarf\-aranges" (clang).
.if '@ENABLE_STACKTRACE_FALSE@'#' .TP
.if '@ENABLE_STACKTRACE_FALSE@'#' .BR \-\-stack\-trace\-frame\-limit = \fIlimit\fR
.if '@ENABLE_STACKTRACE_FALSE@'#' Prints no more than this amount of stack trace frames
.if '@ENABLE_STACKTRACE_FALSE@'#' when backtracing a system call (the default is 256).
.if '@ENABLE_STACKTRACE_FALSE@'#' Use this option with the
.if '@ENABLE_STACKTRACE_FALSE@'#' .B \-\-stack\-trace
.if '@ENABLE_STACKTRACE_FALSE@'#' (or
.if '@ENABLE_STACKTRACE_FALSE@'#' .BR \-k )
.if '@ENABLE_STACKTRACE_FALSE@'#' option.
.TP
.BI "\-o " filename
.TQ
.BR "\-\-output" = \fIfilename\fR
Writes the trace output to the file
.I filename
rather than to stderr.
.IR filename . pid
form is used if
.B \-ff
option is supplied.
If the argument begins with '|' or '!', the rest of the
argument is treated as a command and all output is piped to it.
This is convenient for piping the debugging output to a program
without affecting the redirections of executed programs.
Piping output to a command is not currently compatible with the
.B \-ff
option.
.TP
.B \-A
.TQ
.B \-\-output\-append\-mode
Opens the file provided in the
.B \-o
option in append mode.
.TP
.B \-q
.TQ
.B \-\-quiet
.TQ
.BR \-\-quiet = attach , personality
Suppresses messages about attaching, detaching, and personality changes.
This happens automatically when output is redirected to a file
and the command is run directly instead of attaching.
.TP
.B \-qq
.TQ
.BR \-\-quiet = attach , personality , exit
Suppresses messages about attaching, detaching, personality changes,
and process exit status.
.TP
.B \-qqq
.TQ
.BR \-\-quiet = all
Suppresses all suppressible messages (please refer to the
.B \-\-quiet
option description for the full list of suppressible messages).
.TP
.B \-r
.TQ
.BR \-\-relative\-timestamps [= \fIprecision\fR ]
Prints a relative timestamp upon entry to each system call.
This records the time difference between the beginning of successive
system calls.
.I precision
can be one of
.BR s " (for seconds), " ms " (milliseconds), " us " (microseconds), or " ns
(nanoseconds), and allows setting the precision of time value being printed.
Default is
.B us
(microseconds).
Note that because the
.B \-r
option uses the monotonic clock, its measurements may differ
from the time differences reported by the
.B \-t
option, which uses the wall clock.
.TP
.BI "\-s " strsize
.TQ
.BR "\-\-string\-limit" = \fIstrsize\fR
Specifies the maximum string size to print (the default is 32).
Note that filenames are not considered strings and are always printed in full.
.TP
.BR \-\-absolute\-timestamps [=[[ format: ] \fIformat\fR ],[[ precision: ] \fIprecision ]]
.TQ
.BR \-\-timestamps [=[[ format: ] \fIformat\fR ],[[ precision: ] \fIprecision ]]
Prefixes each line of the trace with the wall clock time in the specified
.I format
with the specified
.IR precision .
.I format
can be one of the following:
.RS
.TP 14
.B none
No time stamp is printed.
Can be used to override the previous setting.
.TQ
.B time
Wall clock time
.RB ( strftime (3)
format string is
.BR %T ).
.TQ
.B unix
Number of seconds since the epoch
.RB ( strftime (3)
format string is
.BR %s ).
.RE
.IP
.I precision
can be one of
.BR s " (for seconds), " ms " (milliseconds), " us " (microseconds), or " ns
(nanoseconds).
Default arguments for the option are
.BR format:time , precision:s .
.TP
.B \-t
.TQ
.B \-\-absolute\-timestamps
Prefixes each line of the trace with the wall clock time.
.TP
.B \-tt
.TQ
.BR \-\-absolute\-timestamps = precision:us
Prints the wall clock time with microsecond precision.
.TP
.B \-ttt
.TQ
.BR \-\-absolute\-timestamps = format:unix , precision:us
Prints the wall clock time as seconds since the epoch,
with microsecond precision.
.TP
.B \-T
.TQ
.BR \-\-syscall\-times [= \fIprecision\fR ]
Shows the time spent in system calls.
This records the time difference between the beginning and the end
of each system call.
.I precision
can be one of
.BR s " (for seconds), " ms " (milliseconds), " us " (microseconds), or " ns
(nanoseconds), and allows setting the precision of time value being printed.
Default is
.B us
(microseconds).
.TP
.B \-v
.TQ
.B \-\-no\-abbrev
Prints unabbreviated versions of environment, stat, termios, etc. calls.
These structures are very common, so the default behavior
is to display a reasonable subset of their members.
Use this option to see all members in full detail.
.TP
.BR \-\-strings\-in\-hex [= \fIoption\fR ]
Controls the use of hexadecimal escape sequences when printing strings.
This option alters the default escaping behavior.
.IP
Normally (when neither this option nor \-x is used),
.B strace
introduces escape sequences in two situations:
to represent non-printable and non-ASCII characters
(i.e., those with character codes less than 32 or greater than 127),
or to disambiguate output, for example, by escaping the quotation marks
that enclose a string or the angle brackets used in file descriptor paths.
When a character must be escaped,
.B strace
prioritizes symbolic C-standard sequences if one exists:
\(lq\fB\\t\fR\(rq (tab),
\(lq\fB\\n\fR\(rq (newline),
\(lq\fB\\v\fR\(rq (vertical tab),
\(lq\fB\\f\fR\(rq (form feed), and
\(lq\fB\\r\fR\(rq (carriage return).
For all other characters that require escaping,
.B strace
defaults to using an octal representation of the character's byte value.
This option allows you to override this default behavior
and use hexadecimal escapes instead of octal ones.
.IP
.I option
can be one of the following:
.RS
.TP 17
.B none
Hexadecimal numbers are not used in the output at all.
When there is a need to emit an escape sequence, octal numbers are used.
.TQ
.B non\-ascii\-chars
Hexadecimal numbers are used instead of octal in the escape sequences.
.TQ
.B non\-ascii
Strings that contain non-ASCII characters are printed using escape sequences
with hexadecimal numbers.
.TQ
.B all
All strings are printed using escape sequences with hexadecimal numbers.
.RE
.IP
When the option is supplied without an argument,
.B all
is assumed.
.TP
.B \-x
.TQ
.BR \-\-strings\-in\-hex = non\-ascii
Prints all non-ASCII strings in hexadecimal string format.
.TP
.B \-xx
.TQ
.BR \-\-strings\-in\-hex [= all ]
Prints all strings in hexadecimal string format.
.TP
.BI "\-X " format
.TQ
.BR "\-\-const\-print\-style" = \fIformat\fR
Sets the format for printing of named constants and flags.
Supported
.I format
values are:
.RS
.TP 10
.B raw
Raw number output, without decoding.
.TQ
.B abbrev
Outputs a named constant or a set of flags instead of the raw number if they are
found.
This is the default
.B strace
behaviour.
.TQ
.B verbose
Outputs both the raw value and the decoded string (as a comment).
.RE
.TP
.B \-y
.TQ
.B \-\-decode\-fds
.TQ
.BR \-\-decode\-fds = path
Prints paths associated with file descriptor arguments and with the
.B AT_FDCWD
constant.
.TP
.B \-yy
.TQ
.BR \-\-decode\-fds = all
Prints all available information associated with file descriptors:
protocol-specific information associated with socket file descriptors,
block/character device number associated with device file descriptors,
and PIDs associated with pidfd file descriptors.
.TP
.B \-\-pidns\-translation
.TQ
.BR \-\-decode\-pids = pidns
If strace and tracee are in different PID namespaces, print PIDs in
strace's namespace, too.
.TP
.B \-Y
.TQ
.BR \-\-decode\-pids = comm
Prints command names for PIDs.
.if '@ENABLE_SECONTEXT_FALSE@'#' .TP
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR \-\-secontext\fR[=\fIformat\fR]
.if '@ENABLE_SECONTEXT_FALSE@'#' .TQ
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR \-e\ secontext\fR=\fIformat\fR
.if '@ENABLE_SECONTEXT_FALSE@'#' When SELinux is available and is not disabled,
.if '@ENABLE_SECONTEXT_FALSE@'#' prints in square brackets SELinux contexts of
.if '@ENABLE_SECONTEXT_FALSE@'#' processes, files, and descriptors.
.if '@ENABLE_SECONTEXT_FALSE@'#' The
.if '@ENABLE_SECONTEXT_FALSE@'#' .I format
.if '@ENABLE_SECONTEXT_FALSE@'#' argument is a comma-separated list of items
.if '@ENABLE_SECONTEXT_FALSE@'#' being one of the following:
.if '@ENABLE_SECONTEXT_FALSE@'#' .RS
.if '@ENABLE_SECONTEXT_FALSE@'#' .TP 18
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR full
.if '@ENABLE_SECONTEXT_FALSE@'#' Prints the full context (user, role, type level
.if '@ENABLE_SECONTEXT_FALSE@'#' and category).
.if '@ENABLE_SECONTEXT_FALSE@'#' .TQ
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR mismatch
.if '@ENABLE_SECONTEXT_FALSE@'#' Also prints the context recorded by the SELinux
.if '@ENABLE_SECONTEXT_FALSE@'#' database in case the current context differs.
.if '@ENABLE_SECONTEXT_FALSE@'#' The latter is printed after two exclamation marks (!!).
.if '@ENABLE_SECONTEXT_FALSE@'#' .RE
.if '@ENABLE_SECONTEXT_FALSE@'#' .IP
.if '@ENABLE_SECONTEXT_FALSE@'#' The default value for
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR \-\-secontext
.if '@ENABLE_SECONTEXT_FALSE@'#' is
.if '@ENABLE_SECONTEXT_FALSE@'#' .BR !full,mismatch
.if '@ENABLE_SECONTEXT_FALSE@'#' that prints only the type instead of full context
.if '@ENABLE_SECONTEXT_FALSE@'#' and doesn't check for context mismatches.
.TP
.B \-\-always\-show\-pid
Shows PID prefix also for the process started by strace.
Implied when \-f and \-o are both specified.
.RE
.SS Statistics
.TP 12
.B \-c
.TQ
.B \-\-summary\-only
Counts time, calls, and errors for each system call and report a summary on
program exit, suppressing the regular output.
This shows system time (CPU time spent in the kernel), which is independent
of wall clock time.
If
.B \-c
is used with
.BR \-f ,
only aggregate totals for all traced processes are kept.
.TP
.B \-C
.TQ
.B \-\-summary
Like
.BR \-c ,
but also prints the regular output while processes are running.
.TP
.BI "\-O " overhead
.TQ
.BR "\-\-summary\-syscall\-overhead" = \fIoverhead\fR
Sets the overhead for tracing system calls to
.IR overhead .
This is useful for overriding the default heuristic, which estimates the time
spent in the measurement process itself when timing system calls with the
.B \-c
option.
The accuracy of the heuristic can be gauged by timing a given program run
without tracing (using
.BR time (1))
and comparing the accumulated system call time to the total produced using
.BR \-c .
.IP
The format of
.I overhead
specification is described in section
.IR "Time specification format description".
.TP
.BI "\-S " sortby
.TQ
.BR "\-\-summary\-sort\-by" = \fIsortby\fR
Sorts the output of the histogram printed by the
.B \-c
option by the specified criterion.
Valid values are
.BR time " (or " time\-percent " or " time\-total " or " total\-time ),
.BR min\-time " (or " shortest " or " time\-min ),
.BR max\-time " (or " longest " or " time\-max ),
.BR avg\-time " (or " time\-avg ),
.BR calls " (or " count ),
.BR errors " (or " error ),
.BR name " (or " syscall " or " syscall\-name ),
and
.BR nothing " (or " none );
default is
.BR time .
.TP
.BI "\-U " columns
.TQ
.BR "\-\-summary\-columns" = \fIcolumns\fR
Configures the set and order of columns shown in the call summary.
The
.I columns
argument is a comma-separated list containing one or more of the following values:
.RS
.TP 36
.BR time\-percent " (or " time )
Percentage of cumulative time consumed by a specific system call.
.TQ
.BR total\-time " (or " time\-total )
Total system (or wall clock, if
.B \-w
option is provided) time consumed by a specific system call.
.TQ
.BR min\-time " (or " shortest " or " time\-min )
Minimum observed call duration.
.TQ
.BR max\-time " (or " longest " or " time\-max )
Maximum observed call duration.
.TQ
.BR avg\-time " (or " time\-avg )
Average call duration.
.TQ
.BR calls " (or " count )
Call count.
.TQ
.BR errors " (or " error )
Error count.
.TQ
.BR name " (or " syscall " or " syscall\-name )
System call name.
.RE
.IP
The default value is
.BR time\-percent , total\-time , avg\-time , calls , errors , name .
If the
.B name
field is not supplied explicitly, it is added as the last column.
.TP
.B \-w
.TQ
.B \-\-summary\-wall\-clock
Summarizes the wall clock time for each system call, measured
from its beginning to its end.
The default is to summarize the system time.
.SS Tampering
.ad l
.TP 12
\fB\-\-inject\fR=\,\fIsyscall_set\/\fR[:\fBerror\fR=\,\fIerrno\/\fR|:\fBretval\fR=\,\fIvalue\/\fR]\:[:\fBsignal\fR=\,\fIsig\/\fR]\:[:\fBsyscall\fR=\,\fIsyscall\/\fR]\:[:\fBdelay_enter\fR=\,\fIdelay\/\fR]\:[:\fBdelay_exit\fR=\,\fIdelay\/\fR]\:[:\fBpoke_enter\fR=\,\fI@argN=DATAN,@argM=DATAM...\/\fR]\:[:\fBpoke_exit\fR=\,\fI@argN=DATAN,@argM=DATAM...\/\fR]\:[:\fBwhen\fR=\,\fIexpr\/\fR] \{
.ad b
Performs system call tampering for the specified set of system calls.
.IP
The syntax of the
.I syscall_set
specification is the same as in the
.B \-\-trace
option.
.IP
At least one of
.BR error ,
.BR retval ,
.BR signal ,
.BR delay_enter ,
.BR delay_exit ,
.BR poke_enter ,
or
.B poke_exit
action options must be specified.
.B error
and
.B retval
are mutually exclusive.
.IP
If the \fBerror\fR=\,\fIerrno\/\fR option is specified,
a fault is injected into the system call.
This is achieved by replacing the system call number with \-1
(representing an invalid system call)
and setting the error code to the specified
.IR errno .
This behavior of replacing the syscall number with \-1
can be overridden using the
.BR syscall =
option.
The
.I errno
can be a symbolic name like
.B ENOSYS
or a numeric value in the range 1..4095.
.IP
If the \fBretval\fR=\,\fIvalue\/\fR option is specified,
a success value is injected.
The system call number is replaced as with the
.BR error =
option, but instead of an error, the specified success
.I value
is returned to the caller process.
.IP
If the \fBsignal\fR=\,\fIsig\/\fR option is specified with either a symbolic value
like
.B SIGSEGV
or a numeric value within 1..\fBSIGRTMAX\fR range,
that signal is delivered on entering every system call specified by the
.IR syscall_set .
.IP
If the \fBdelay_enter\fR=\,\fIdelay\/\fR or \fBdelay_exit\fR=\,\fIdelay\/\fR
options are specified, delay injection is performed: the tracee is delayed
by time period specified by
.IR delay
on entering or exiting the system call, respectively.
The format of
.I delay
specification is described in section
.IR "Time specification format description".
.IP
If the \fBpoke_enter\fR=\fI@argN=DATAN,@argM=DATAM...\fR
or \fBpoke_exit\fR=\fI@argN=DATAN,@argM=DATAM...\fR options are specified,
tracee's memory at locations, pointed to by system call arguments
.IR argN
and
.IR argM
(going from
.IR arg1
to
.IR arg7 )
is overwritten by data
.IR DATAN
and
.IR DATAM
(specified in hexadecimal format; for example
\fBpoke_enter\fR=\fI@arg1=0000DEAD0000BEEF\fR).
The \fBpoke_enter\fR option modifies memory on system call enter,
while \fBpoke_exit\fR does so on system call exit.
.IP
The injection actions are independent.
For example, specifying only
.BR signal =
delivers a signal without altering the system call's outcome or delaying it.
Similarly, specifying only
.BR error =
injects a system call fault without adding a signal or delay.
.IP
If the \fBsignal\fR=\,\fIsig\/\fR option is specified together with
\fBerror\fR=\,\fIerrno\/\fR or \fBretval\fR=\,\fIvalue\/\fR,
then both injection of a fault or success and signal delivery are performed.
.IP
If the \fBsyscall\fR=\fIsyscall\fR option is specified,
the given
.I syscall
is injected instead of the default \-1.
The specified
.I syscall
must have no side effects; currently, only system calls from the
.B %pure
set are supported.
.IP
Unless the \fBwhen\fR=\,\fIexpr\fR subexpression is specified,
an injection is being made into every invocation of each system call from the
.IR syscall_set .
.IP
The format of the subexpression is:
.RS 15
.IP
\fIfirst\/\fR[\fB..\fR\,\fIlast\/\fR][\fB+\fR[\,\fIstep\/\fR]]
.RE
.IP
Number
.I first
stands for the first invocation number in the range, number
.I last
stands for the last invocation number in the range, and
.I step
stands for the step between two consecutive invocations.
The following combinations are useful:
.RS
.TP 18
.I first
Injects into invocation number
.I first
only for each system call in the
.IR syscall_set .
.TQ
\fIfirst\/\fB..\fR\,\fIlast\fR
Injects into invocations from
.I first
through
.I last
(inclusive) for each system call in the
.IR syscall_set .
.TQ
\fIfirst\/\fB+\fR
Injects into every invocation, starting with number
.IR first ,
for each system call in the
.IR syscall_set .
.TQ
\fIfirst\/\fB+\fR\,\fIstep\fR
Injects into invocations number
.IR first ,
.IR first + step ,
.IR first + step + step ,
and so on, for each system call in the
.IR syscall_set .
.TQ
\fIfirst\/\fB..\fR\,\fIlast\fB+\fR\,\fIstep\fR
Same as the previous, but consider only invocations with numbers up to
.I last
(inclusive).
.RE
.IP
For example, to fail each third and subsequent chdir system calls with
.BR ENOENT ,
use
\fB\-\-inject\fR=\,\fIchdir\/\fR:\fBerror\fR=\,\fIENOENT\/\fR:\fBwhen\fR=\,\fI3\/\fB+\fR.
.IP
The valid range for numbers
.I first
and
.I step
is 1..65535, and for number
.I last
is 1..65534.
.IP
An injection expression can contain at most one fault
or return value specification (i.e., either
.BR error =
or
.BR retval =)
and at most one
.BR signal =
specification.
If an injection expression contains multiple
.BR when =
specifications, the last one takes precedence.
.IP
Accounting of system calls that are subject to injection
is done per system call and per tracee.
.IP
Specification of system call injection can be combined
with other system call filtering options, for example,
\fB\-P \fI/dev/urandom \fB\-\-inject\fR=\,\fIfile\/\fR:\fBerror\fR=\,\fIENOENT\fR.
.TP
\fB\-e\ inject\fR=\,\fIargs\/\fR
This is equivalent to \fB\-\-inject\fR=\,\fIargs\/\fR.
.TP
\fB\-\-fault\fR=\,\fIsyscall_set\/\fR[:\fBerror\fR=\,\fIerrno\/\fR][:\fBwhen\fR=\,\fIexpr\/\fR]
Performs system call fault injection for the specified set of system calls.
.IP
This is a shortcut for the more general
.BR \-\-inject =
option, using a default
.I errno
of
.BR ENOSYS .
.TP
\fB\-e\ fault\fR=\,\fIargs\/\fR
This is equivalent to \fB\-\-fault\fR=\,\fIargs\/\fR.
.SS Miscellaneous
.TP 12
.B \-d
.TQ
.B \-\-debug
Shows some debugging output of
.B strace
itself on the standard error.
.TP
.B \-F
This option is deprecated.
It is retained for backward compatibility only
and may be removed in future releases.
Using multiple
.B \-F
options is equivalent to a single
.BR \-f .
This option is ignored entirely if used in conjunction with one or more
.B \-f
options.
.TP
.B \-h
.TQ
.B \-\-help
Prints the help summary.
.TP
.B \-\-seccomp\-bpf
Attempts to use seccomp-bpf (see
.BR seccomp (2))
to cause the kernel to stop the tracee only for the system calls
that are being traced.
.IP
This option has no effect unless
.BR \-f / \-\-follow\-forks
is also specified.
.B \-\-seccomp\-bpf
is not compatible with
.B \-\-syscall\-limit
and
.BR \-b / \-\-detach\-on
options.
It is also not applicable to processes attached using
.BR \-p / \-\-attach
option.
.IP
An attempt to enable system calls filtering using seccomp-bpf may
fail for various reasons, e.g. there are too many system calls to filter,
the seccomp API is not available, or
.B strace
itself is being traced.
If the seccomp-bpf filter setup fails,
.B strace
proceeds as usual, stopping traced processes on every system call.
.IP
When
.B \-\-seccomp\-bpf
is activated and
.BR \-p / \-\-attach
option is not used,
.B \-\-kill\-on\-exit
option is activated as well.
.IP
Note that in cases when the tracee has another seccomp filter that
returns an action value with a precedence greater than
.BR SECCOMP_RET_TRACE ,
.B strace \-\-seccomp\-bpf
will not be notified.
That is, if another seccomp filter, for example,
disables the system call or kills the tracee, then
.B strace \-\-seccomp\-bpf
will not be aware of that system call invocation at all.
.TP
.BR \-\-tips [=[[ id: ] \fIid\fR ],[[ format: ] \fIformat\fR ]]
Shows strace tips, tricks, and tweaks before exit.
The
.I id
can be a non-negative integer to print a specific tip
(note: these IDs are not guaranteed to be stable).
It can also be
.B random
(the default), in which case a random tip is printed.
.I format
can be one of the following:
.RS
.TP 9
.B none
No tip is printed.
Can be used to override the previous setting.
.TQ
.B compact
Prints the tip just big enough to contain all the text.
.TQ
.B full
Prints the tip in its full glory.
.RE
.IP
Default is
.BR id:random,format:compact .
.TP
.B \-V
.TQ
.B \-\-version
Prints the version number of
.B strace
and the list of enabled optional features.
Multiple instances of this option beyond specific threshold
tend to increase der Strauss awareness.
.SS "Time specification format description"
.PP
Time values are specified as a decimal floating point number
(in a format accepted by
.BR strtod (3)),
optionally followed by a suffix to indicate the unit of time:
.B s
(seconds),
.B ms
(milliseconds),
.B us
(microseconds), or
.B ns
(nanoseconds).
If no suffix is specified, the value defaults to microseconds.
.PP
The described format is used for
.BR \-O ", " \-\-inject = delay_enter ", and " \-\-inject = delay_exit
options.
.SH DIAGNOSTICS
When
.I command
exits,
.B strace
exits with the same exit status.
If
.I command
is terminated by a signal,
.B strace
terminates itself with the same signal, so that
.B strace
can be used as a wrapper process transparent to the invoking parent process.
Note that the parent-child relationship (signal stop notifications, the
.BR getppid (2)
value, etc) between the traced process and its parent is not preserved
unless
.B \-D
is used.
.LP
When using
.B \-p
without a
.IR command ,
the exit status of
.B strace
is zero unless no processes have been attached or
an unexpected error occurred during tracing.
.SH "SETUID INSTALLATION"
If
.B strace
is installed setuid to root, then the invoking user will be able to
attach to and trace processes owned by any user.
In addition, setuid and setgid programs will be executed and traced
with the correct effective privileges.
Since these capabilities should only be granted to users
with full root privileges, installing
.B strace
as setuid to root is only appropriate when its use is restricted
to such trusted users.
For example, a special version of
.B strace
could be installed with mode 'rwsr\-x\-\-\-', user
.B root,
and group
.BR trace .
In this configuration, only trusted users who are members of the
.B trace
group could execute it.
If you use this feature, remember to also install
a regular, non-setuid version of
.B strace
for ordinary users.
.SH "MULTIPLE PERSONALITIES SUPPORT"
On some architectures,
.B strace
can decode system calls for processes that use a different
Application Binary Interface (ABI) from the one
.B strace
uses.
Specifically, in addition to decoding native ABI,
.B strace
can decode the following ABIs on the following architectures:
.TS H
allbox;
lb lb
l l.
Architecture	ABIs supported
x86_64	i386, x32 [1]; i386 [2]
AArch64	ARM 32-bit EABI
PowerPC 64-bit [3]	PowerPC 32-bit
s390x	s390
SPARC 64-bit	SPARC 32-bit
TILE 64-bit	TILE 32-bit
.TE
.RS 0
.TP 5
[1]
When
.B strace
is built as an x86_64 application
.TQ
[2]
When
.B strace
is built as an x32 application
.TQ
[3]
Big endian only
.RE
.PP
This support is optional and depends on the ability
to generate and parse structure definitions at build time.
Refer to the output of the
.B strace \-V
command to determine which ABIs are supported by your
.B strace
build.
In this context, "non-native" refers to an ABI that differs from the one
.B strace
is using:
.TP 15
.B m32\-mpers
.B strace
can trace and properly decode non-native 32-bit binaries.
.TQ
.B no\-m32\-mpers
.B strace
can trace, but cannot properly decode non-native 32-bit binaries.
.TQ
.B mx32\-mpers
.B strace
can trace and properly decode non-native 32-on-64-bit binaries.
.TQ
.B no\-mx32\-mpers
.B strace
can trace, but cannot properly decode non-native 32-on-64-bit binaries.
.PP
If the output contains neither
.B m32\-mpers
nor
.BR no\-m32\-mpers ,
it means that support for decoding non-native 32-bit binaries
is not applicable to the architecture.
.PP
Likewise, if the output contains neither
.B mx32\-mpers
nor
.BR no\-mx32\-mpers ,
it means that support for decoding non-native 32-on-64-bit binaries
is not applicable to the architecture.
.SH NOTES
Systems that use shared libraries often produce a large amount
of tracing output when loading them.
.LP
It is instructive to think about system call inputs and outputs
as data-flow across the user/kernel boundary.
Because user-space and kernel-space are separate and address-protected,
it is sometimes possible to make deductive inferences about process
behavior using inputs and outputs as propositions.
.LP
In some cases, a system call will differ from the documented behavior
or have a different name.
For example, the underlying
.BR faccessat (2)
system call does not have a
.I flags
argument, and the
.BR setrlimit (2)
library function is implemented using
.BR prlimit64 (2)
system call on modern (2.6.38+) kernels.
These discrepancies are normal characteristics of the system call
interface and are handled by C library wrapper functions.
.LP
Some system calls have different names in different architectures and
personalities.
In these cases, system call filtering and printing uses the names
that match corresponding
.BR __NR_ *
kernel macros of the tracee's architecture and personality.
There are two exceptions from this general rule:
.BR arm_fadvise64_64 (2)
ARM system call and
.BR xtensa_fadvise64_64 (2)
Xtensa system call are filtered and printed as
.BR fadvise64_64 (2).
.LP
On the x32 ABI, some system calls are intended for 64-bit processes
but can be invoked from x32 by setting the
.B __X32_SYSCALL_BIT
flag.
When this occurs,
.B strace
designates these calls with a
.B "#64"
suffix.
An example is
.BR readv (2),
which is syscall number 19 on x86_64, whereas
its distinct x32 counterpart is syscall number 515.
.LP
On some platforms, a process attached with the
.B \-p
option may receive a spurious
.B EINTR
error from a non-restartable system call.
This can have an unpredictable effect on the process
if it does not attempt to restart the call.
Ideally, all system calls should be restarted on
.B strace
attach, making the attach invisible to the traced process,
but a few system calls aren't.
Arguably, every instance of such behavior is a kernel bug.
.LP
Since
.B strace
executes the specified
.I command
directly without a shell, scripts that lack a shebang line
(e.g., #!/bin/sh) will fail with an
.B ENOEXEC
error, even if a shell could run them correctly.
It is advisable to manually supply a shell as a
.I command
with the script as its argument.
.SH BUGS
Programs that use the
.I setuid
bit do not have
effective user
.SM ID
privileges while being traced.
.LP
A traced process runs more slowly than a non-traced one.
The performance impact can be mitigated by using the
.B \-\-seccomp\-bpf
option.
.LP
When tracing a
.IR command ,
its descendant processes may be left running after
.B strace
is terminated by an interrupt signal (such as
.RB CTRL-C ).
This can be prevented by using the
.B \-\-kill\-on\-exit
option, or by using
.B \-\-seccomp\-bpf
option in a way that implies
.BR \-\-kill\-on\-exit .
.LP
A traced process can use the
.B CLONE_UNTRACED
flag with the
.B clone
system call to create a child process that is not traced by strace.
This breaks a guarantee of the
.B \-\-seccomp\-bpf
option, as this untraced child may be left with an active seccomp filter
after strace terminates.
.SH HISTORY
The original
.B strace
was written by Paul Kranenburg
for SunOS and was inspired by its
.B trace
utility.
The SunOS version of
.B strace
was ported to Linux and enhanced
by Branko Lankester, who also wrote the Linux kernel support.
Even though Paul released
.B strace
2.5 in 1992,
Branko's work was based on Paul's
.B strace
1.5 release from 1991.
.PP
In 1993, Rick Sladkey took on the project.
He merged
.B strace
2.5 for SunOS with the second release of
.B strace
for Linux, added many features from SVR4's
.BR truss (1),
and produced a version of
.B strace
that worked on both platforms.
In 1994 Rick ported
.B strace
to SVR4 and Solaris and wrote the automatic configuration support.
In 1995 he ported
.B strace
to Irix
(and became tired of writing about himself in the third person).
.PP
Beginning with 1996,
.B strace
was maintained by Wichert Akkerman.
During his tenure,
.B strace
development migrated to CVS; ports to FreeBSD and many architectures on Linux
(including ARM, IA-64, MIPS, PA-RISC, PowerPC, s390, SPARC) were introduced.
.PP
In 2002, responsibility for
.B strace
maintenance was transferred to Roland McGrath.
Since then,
.B strace
gained support for several new Linux architectures (AMD64, s390x, SuperH),
bi-architecture support for some of them, and received numerous additions and
improvements in system calls decoders on Linux;
.B strace
development migrated to
.B Git
during that period.
.PP
Since 2009,
.B strace
has been actively maintained by Dmitry Levin.
During this period,
.B strace
has gained support for the
AArch64, ARC, AVR32, Blackfin, C-SKY, LoongArch, Meta,
Nios II, OpenRISC 1000, RISC-V, Tile/TileGx, and Xtensa architectures.
In 2012, unmaintained and apparently broken support for non-Linux operating
systems was removed.
Also, in 2012
.B strace
gained support for path tracing and file descriptor path decoding.
In 2014, support for stack trace printing was added.
In 2016, system call tampering was implemented.
.PP
For the additional information, please refer to the
.B NEWS
file and
.B strace
repository commit log.
.SH REPORTING BUGS
Problems with
.B strace
should be reported to the
.UR mailto:strace\-devel@lists.strace.io
.B strace
mailing list
.UE .
.SH "SEE ALSO"
.BR strace\-log\-merge (1),
.BR ltrace (1),
.BR perf\-trace (1),
.BR trace\-cmd (1),
.BR time (1),
.BR ptrace (2),
.BR seccomp (2),
.BR syscall (2),
.BR proc (5),
.BR signal (7)
.PP
.UR https://strace.io/
.B strace
Home Page
.UE
.SH AUTHORS
The complete list of
.B strace
contributors can be found in the
.B CREDITS
file.
